# .github/workflows/ci.yml

name: CI

on:
  push:
    branches:
      - main  # Or whatever branch you want the updates to be pushed to
  pull_request:

permissions:
  contents: write

jobs:
  generate-roadmap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements/base.txt

      - name: Generate ROADMAP.md
        run: python scripts/generate_roadmap_md.py

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Commit changes
        run: |
          git add ROADMAP.md
          git commit -m "Update ROADMAP.md via CI" || echo "No changes to commit"

      - name: Push changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  integration-test:
    runs-on: ubuntu-latest
    needs: generate-roadmap  # Ensure generation runs first
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables from secrets
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "YOUR_GITHUB_API_KEY=${{ secrets.YOUR_GITHUB_API_KEY }}" >> $GITHUB_ENV
          echo "HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}" >> $GITHUB_ENV
          echo "ZAP_API_KEY=${{ secrets.ZAP_API_KEY }}" >> $GITHUB_ENV
          echo "COMPOSE_PROJECT_NAME=metamorphic-core" >> $GITHUB_ENV
          echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV
          echo "PYTHONPATH=src:." >> $GITHUB_ENV # Keeping this for consistency, though maybe redundant with package install
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV # Add this line

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements/**') }}
          restore-keys: pip-${{ runner.os }}-

      - name: Install dependencies & Coq/Z3 via apt-get
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
          pip install pytest pytest-cov
          pip install bandit
          pip install -e .  # Install the package in development mode

          # Install Coq and Z3 via apt-get
          sudo apt-get update
          sudo apt-get install -y coq z3

      - name: Compile Coq Proofs
        run: |
          mkdir -p proofs
          mv src/core/verification/boundary_detection.v proofs/
          coqc -Q proofs Metamorphic proofs/boundary_detection.v # Compile Coq proofs

      - name: Build Flask app Docker image
        run: docker build -t flask-app-test .

      - name: Run Flask app Docker container
        run: |
          docker run -d \
            -p 5000:5000 \
            --name flask-app-container \
            --network=host \
            -e REDIS_URL=redis://localhost:6379 \
            -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            -e HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }} \
            -e YOUR_GITHUB_API_KEY=${{ secrets.YOUR_GITHUB_API_KEY }} \
            -e ZAP_API_KEY=${{ secrets.ZAP_API_KEY }} \
            flask-app-test

      - name: Wait for Flask app to start
        run: |
          max_attempts=30
          attempt=0
          # --- CORRECTED URL HERE ---
          health_url="http://localhost:5000/genesis/health"
          while [ $attempt -lt $max_attempts ]; do
            if curl --fail -s $health_url; then
              echo "Flask app is ready!"
              break
            fi
            echo "Waiting for Flask app to start... ($attempt/$max_attempts) at $health_url" # Added URL to log
            sleep 2
            attempt=$((attempt + 1))
          done
          if [ $attempt -eq $max_attempts ]; then
            echo "Container logs:"
            docker logs flask-app-container
            exit 1
          fi

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          # --- CORRECTED URL HERE ---
          target: http://localhost:5000/genesis/health
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          fail_action: false
          allow_issue_writing: false

      - name: Parse ZAP report and fail on high-risk issues
        run: |
          # Check if report exists before parsing
          if [ ! -f zap_report.json ]; then
            echo "ZAP report file (zap_report.json) not found. Skipping check."
            exit 0 # Or handle as appropriate if report is mandatory
          fi
          # Use jq -e to fail if path doesn't exist or value is null/false
          if jq -e '.alerts | map(select(.risk == "high")) | length > 0' zap_report.json > /dev/null; then
             high_risk=$(jq '.alerts | map(select(.risk == "high")) | length' zap_report.json)
             echo "Found $high_risk high-risk issues."
             exit 1
          else
             echo "No high-risk issues found."
          fi


      - name: Run Bandit Security Scan
        run: |
          bandit -r src -f txt -q || true # Run bandit and allow workflow to continue

      - name: Run tests with coverage
        run: pytest tests -m "not quantum" --cov=src --cov-report=term --cov-report=html # Skip quantum tests

      - name: Run Generated Tests
        run: |
          # Set up the test file path
          mkdir -p generated_tests

          # Generate tests and store them in KG (and write to file)
          # Using a simple function for predictable test generation name
          python -c "from src.core.agents.test_generator import GeneratorAgent; GeneratorAgent().generate_tests('def square(n):\\n    return n * n', {}, 'generated_tests/generated_tests.py')" # Updated class name

          # Verify the file exists (still a good sanity check)
          ls -l generated_tests

          # Run pytest on the generated tests
          pytest generated_tests/generated_tests.py --cov=src --cov-append

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  docker-build:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/metamorphic-core:latest
          cache-from: type=gha