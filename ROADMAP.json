{
  "phase": "Phase 2 Iteration 2 - Enhanced Agents & Knowledge Graph",
  "phase_goal": "Enhance the intelligence and capabilities of core AI Agents, and deepen integration with the Knowledge Graph to improve context handling, reasoning, and overall system performance.",
  "success_metrics": [
    "Improved performance of CodeReviewAgent (e.g., reduced false positives, increased accuracy in identifying complex code issues).",
    "Enhanced TestGenerationAgent capable of generating more intelligent and context-aware tests (beyond placeholders).",
    "Knowledge Graph expanded to store richer semantic information about code, ethical policies, and system behavior.",
    "Agents demonstrate improved context awareness and reasoning through KG integration, measured by benchmark tasks (to be defined).",
    "Unit tests for enhanced agents and KG integration achieve >= 80% code coverage."
  ],
  "tasks": [
    {
      "task_id": "task_2_2a",
      "priority": "High",
      "task_name": "Automate Initial Prompt Submission from CLI",
      "description": "Modify the CLI (`src/cli/main.py`) to automatically construct the Driver LLM prompt (reading from `docs/workflows/markdown_automation.md` and documentation files) and submit it to the `/genesis/drive_workflow` API endpoint (new endpoint to be created in Phase 2 Iteration 2). This will eliminate the manual copy-paste step for users initiating the workflow.",
      "status": "Not Started",
      "Success Criteria": "CLI script automatically constructs and submits the prompt to a mock API endpoint (for initial testing). No manual copy-paste of prompt required to initiate workflow. Basic unit tests for prompt construction and API call (mocked) are implemented.",
      "Potential Risks": "API endpoint not yet implemented (dependent on other tasks in Phase 2), complexity in handling file paths and content loading in CLI, potential errors in prompt construction logic.",
      "Mitigation": "Start by mocking the API endpoint for initial CLI implementation, focus on robust file handling and prompt assembly in the CLI, implement the actual API endpoint in a parallel task, add logging for debugging.",
      "Time Saving Strategy": "Focus on CLI-side implementation first, decouple from API endpoint initially using mocks."
    },
    {
      "task_id": "task_2_2b",
      "priority": "High",
      "task_name": "Enhance CodeReviewAgent with Semantic Analysis",
      "description": "Improve the `CodeReviewAgent` to perform basic semantic analysis of code beyond just Flake8 checks. This could involve using AST parsing to understand code structure, identify potential design flaws, and provide more context-aware code quality feedback. Initial focus on identifying overly complex functions or classes based on AST metrics (e.g., cyclomatic complexity, lines of code).",
      "status": "Not Started",
      "Success Criteria": "`CodeReviewAgent` can extract basic AST-based metrics (cyclomatic complexity, LOC) and include them in its analysis output. New unit tests added to verify metric extraction and reporting. Agent's output format updated to include semantic analysis results.",
      "Potential Risks": "Complexity in AST analysis and metric calculation, potential performance impact of deeper analysis, defining meaningful thresholds for complexity metrics.",
      "Mitigation": "Start with simple metrics and gradually increase complexity, profile performance impact and optimize as needed, define initial thresholds based on literature and adjust based on testing.",
      "Dependencies": ["task_2_2a"],
      "Time Saving Strategy": "Focus on a limited set of key metrics initially, use existing AST parsing libraries, defer complex semantic reasoning for later iterations."
    },
    {
      "task_id": "task_2_2c",
      "priority": "Medium",
      "task_name": "Improve TestGenerationAgent for Function Complexity",
      "description": "Enhance the `TestGenerationAgent` to generate more intelligent placeholder tests that are tailored to the complexity of the function being tested. For functions identified as complex (using metrics from enhanced `CodeReviewAgent`), generate a larger number of placeholder tests or tests covering different input types (e.g., edge cases, boundary values).",
      "status": "Not Started",
      "Success Criteria": "`TestGenerationAgent` can receive complexity metrics from `CodeReviewAgent` and adjust the number or type of generated placeholder tests based on these metrics. Unit tests verify test generation variations based on different complexity levels. Agent's test generation logic updated to incorporate complexity metrics.",
      "Potential Risks": "Defining 'complexity' thresholds for triggering enhanced test generation, ensuring generated placeholder tests are still meaningful, potential increase in test generation time.",
      "Dependencies": ["task_2_2b"],
      "Time Saving Strategy": "Start with a simple complexity threshold (e.g., cyclomatic complexity > X), focus on varying the *number* of placeholder tests initially, refine test generation logic iteratively."
    },
    {
      "task_id": "task_2_2d",
      "priority": "Medium",
      "task_name": "Expand Knowledge Graph Schema for Code Semantics",
      "description": "Extend the Knowledge Graph schema to store semantic information extracted by the enhanced `CodeReviewAgent`. This includes storing function signatures, class structures, dependencies, and complexity metrics as nodes and edges in the KG. This will enable agents to leverage richer context from the KG for improved reasoning and analysis.",
      "status": "Not Started",
      "Success Criteria": "KG schema updated to include new node types and relationship types for code semantics (function, class, dependency, complexity_metric, etc.). Data migration script (or logic) created to populate KG with semantic information from existing code (can be placeholder data initially). Unit tests for KG schema extension and data storage/retrieval.",
      "Potential Risks": "Designing an effective and scalable KG schema, complexity in mapping AST-based metrics to KG representation, potential performance impact of larger KG.",
      "Dependencies": ["task_2_2b"],
      "Time Saving Strategy": "Start with a minimal KG schema extension focusing on key semantic elements, use in-memory KG for initial testing, defer performance optimization and large-scale data migration for later iterations."
    }
  ],
  "next_phase_actions": [
    "Set `status`: `complete` on all Phase 2 Iteration 2 tasks",
    "Remove all Phase 2 Iteration 2 tasks from the json config",
    "Set ðŸŽ¯ CURRENT FOCUS to `Phase 2 Iteration 3: Ethical Governance & API Expansion`",
    "Add tasks from Iteration 3 (Ethical Governance & API Expansion)"
  ],
  "current_focus": "ðŸŽ¯ CURRENT FOCUS: Phase 2 Iteration 2 - Enhanced Agents & Knowledge Graph ðŸš€"
}