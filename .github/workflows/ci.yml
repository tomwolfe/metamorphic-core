name: CI

on: [push, pull_request]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables from secrets
        run: |
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
          echo "YOUR_GITHUB_API_KEY=${{ secrets.YOUR_GITHUB_API_KEY }}" >> $GITHUB_ENV
          echo "HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}" >> $GITHUB_ENV
          echo "ZAP_API_KEY=${{ secrets.ZAP_API_KEY }}" >> $GITHUB_ENV
          echo "COMPOSE_PROJECT_NAME=metamorphic-core" >> $GITHUB_ENV
          echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV
          echo "PYTHONPATH=src:." >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements/**') }}
          restore-keys: pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt
          pip install pytest pytest-cov
          pip install -e .  # Install the package in development mode

      - name: Build Flask app Docker image
        run: docker build -t flask-app-test .

      - name: Run Flask app Docker container
        run: |
          docker run -d \
            -p 5000:5000 \
            --name flask-app-container \
            --network=host \
            -e REDIS_URL=redis://localhost:6379 \
            -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            -e HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }} \
            -e YOUR_GITHUB_API_KEY=${{ secrets.YOUR_GITHUB_API_KEY }} \
            -e ZAP_API_KEY=${{ secrets.ZAP_API_KEY }} \
            flask-app-test

      - name: Wait for Flask app to start
        run: |
          max_attempts=30
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl --fail -s http://localhost:5000/health; then
              echo "Flask app is ready!"
              break
            fi
            echo "Waiting for Flask app to start... ($attempt/$max_attempts)"
            sleep 2
            attempt=$((attempt + 1))
          done
          if [ $attempt -eq $max_attempts ]; then
            echo "Container logs:"
            docker logs flask-app-container
            exit 1
          fi

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: http://localhost:5000/health
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          fail_action: false
          allow_issue_writing: false

      - name: Parse ZAP report and fail on high-risk issues
        run: |
          cat zap_report.json | jq '.alerts | map(select(.risk == "high")) | length' > high_risk_count
          high_risk=$(cat high_risk_count)
          if [ $high_risk -gt 0 ]; then
            echo "Found $high_risk high-risk issues."
            exit 1
          fi

      - name: Run tests with coverage
        run: pytest --cov=src --cov-report=term --cov-report=html tests/
    
      - name: Run Generated Tests
        run: |
          GENERATED_TESTS_FILE="generated_tests.py"
          python -c "from src.core.agents.test_generator import TestGenAgent; \
          TestGenAgent()._store_tests('placeholder', 0)"  # Updated class name
          pytest $GENERATED_TESTS_FILE --cov=src --cov-append
      
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  docker-build:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/metamorphic-core:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
