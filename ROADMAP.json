{
  "phase": "Phase 1.5 - Workflow Automation Side Project (Stage 2)",
  "phase_goal": "Implement Level 2 Markdown Automation Workflow: File Writing, Task Selection, CLI Integration - efficiently and securely.",
  "success_metrics": [
    "Level 2 Workflow Driver components fully implemented & tested (write_file, task selection, CLI integration)",
    "Unit tests passing for all new components (100% coverage goal for critical modules)",
    "CLI tool functional for basic workflow execution",
    "Phase 1.5 review document completed"
  ],
  "tasks": [
    {
      "task_id": "task_2_7a1",
      "priority": "Critical",
      "task_name": "Create `write_file.py` (placeholder)",
      "description": "Fast-path: Create `src/cli/write_file.py` placeholder `write_file()` function (`pass`). Minimal initial impl. Unblocks dependent tasks.",
      "status": "Completed",
      "Success Criteria": "`write_file.py` exists, valid Python, `write_file()` with `pass`, Flake8 clean.",
      "Potential Risks": "Syntax, signature mismatch.",
      "Mitigation": "Flake8, signature review, type hints.",
      "Time Saving Strategy": "Minimal placeholder for parallel work."
    },
    {
      "task_id": "task_2_7a2",
      "priority": "High",
      "task_name": "Unit test `write_file.py` (placeholder)",
      "description": "Quickly add unit test for placeholder `write_file()`. Test existence, callability, no exceptions. Trivial pass for fast iteration.",
      "status": "Completed",
      "Success Criteria": "Test `test_write_file_placeholder_exists` in `test_workflow_driver.py`, tests `write_file()` placeholder, passes pytest.",
      "Potential Risks": "Test setup, assertion logic, exceptions.",
      "Mitigation": "Pytest docs, pytest run, output check.",
      "Dependencies": ["task_2_7a1"],
      "Time Saving Strategy": "Simple test for fast function validation."
    },
    {
      "task_id": "task_2_6a",
      "priority": "High",
      "task_name": "Load tasks in `WorkflowDriver` Init",
      "description": "Implement: `WorkflowDriver.__init__` loads tasks from `ROADMAP.json` into `self.tasks`. Verify `load_roadmap()` call in `__init__`. Modify `src/core/automation/workflow_driver.py`.",
      "status": "Completed",
      "Success Criteria": "`WorkflowDriver` init no errors, `self.tasks` populated, `load_roadmap()` called once.",
      "Potential Risks": "Scope, path, load errors.",
      "Mitigation": "`load_roadmap()` call verification, inspect `self.tasks`, logging.",
      "Dependencies": [],
      "Time Saving Strategy": "Direct implementation, clear criteria."
    },
    {
      "task_id": "task_2_6b",
      "priority": "High",
      "task_name": "Implement `select_next_task()` Logic",
      "description": "Implement `WorkflowDriver.select_next_task()`: returns 1st 'Not Started' task, or `None`. Handle empty `self.tasks`.",
      "status": "Completed",
      "Success Criteria": "`select_next_task()` returns correct task/None, handles empty list.",
      "Potential Risks": "Iteration logic, off-by-one, status check, empty list.",
      "Mitigation": "Detailed unit tests, debugger, status comparison.",
      "Dependencies": ["task_2_6a"],
      "Time Saving Strategy": "TDD, comprehensive tests for logic robustness."
    },
    {
      "task_id": "task_2_6c",
      "priority": "High",
      "task_name": "Unit test Task Selection",
      "description": "Unit tests for `select_next_task()` in `tests/test_workflow_driver.py`. Scenarios: 'Not Started' tasks (start, middle, end), none, empty list.",
      "status": "Not Started",
      "Success Criteria": "Unit tests in `tests/test_workflow_driver.py`, all pass, scenarios covered, task/None assertions.",
      "Potential Risks": "Incomplete coverage, assertions, test isolation, data setup.",
      "Mitigation": "TDD, coverage review, assertion checks, clear test data.",
      "Dependencies": ["task_2_6b"],
      "Time Saving Strategy": "TDD for focused dev, clear tests for validation."
    },
    {
      "task_id": "task_2_7b1",
      "priority": "High",
      "task_name": "Impl. `write_file()` - Core Write Logic",
      "description": "Implement core file writing in `write_file.py`: write `content`, handle `FileNotFoundError`, `PermissionError` (logging). Return `True`/`False`.",
      "status": "Not Started",
      "Success Criteria": "`write_file()` writes, catches/logs exceptions, returns `True`/`False`.",
      "Potential Risks": "File I/O errors, exception handling, logging, path injection, overwrite.",
      "Mitigation": "`try...except`, logging, basic path sanitization, defer overwrite.",
      "Dependencies": ["task_2_7a1", "task_2_7a2"],
      "Time Saving Strategy": "Core logic first, defer overwrite checks."
    },
    {
      "task_id": "task_2_7b2",
      "priority": "High",
      "task_name": "Impl. `write_file()` - Overwrite Checks",
      "description": "Enhance `write_file.py`: `overwrite=False` (default), check exists, `FileExistsError`. `overwrite=True` overwrites. `file_exists(filepath)` helper.",
      "status": "Not Started",
      "Success Criteria": "`write_file(overwrite=False)` raises `FileExistsError`, `overwrite=True` overwrites, `file_exists()` works, documented.",
      "Potential Risks": "Overwrite logic, file checks, exceptions, race conditions.",
      "Mitigation": "Conditional logic, `os.path.exists()`, test overwrite, file locking (future).",
      "Dependencies": ["task_2_7b1"],
      "Time Saving Strategy": "Iterative enhancement, focused overwrite safety."
    },
    {
      "task_id": "task_2_7b3a",
      "priority": "High",
      "task_name": "Unit test `write_file()` - Success & Exceptions",
      "description": "Unit tests in `tests/test_workflow_driver.py` for `write_file()`: successful write, `FileNotFoundError`, `PermissionError` handling.",
      "status": "Not Started",
      "Success Criteria": "Tests for success/exceptions pass, assertions verify behavior, temp files.",
      "Potential Risks": "Incomplete coverage, error simulation, assertions.",
      "Mitigation": "Pytest fixtures, temp dirs, coverage reports, TDD.",
      "Dependencies": ["task_2_7b2"],
      "Time Saving Strategy": "Focused testing of core writing and exception paths."
    },
    {
      "task_id": "task_2_7b3b",
      "priority": "High",
      "task_name": "Unit test `write_file()` - Overwrite & `file_exists()`",
      "description": "Unit tests in `tests/test_workflow_driver.py` for `write_file()`: `FileExistsError` (overwrite=False), overwrite=True, `file_exists()` tests. Coverage goal.",
      "status": "Not Started",
      "Success Criteria": "Tests for overwrite/file_exists pass, assertions verify behavior, coverage goal achieved.",
      "Potential Risks": "Incomplete coverage, assertions, file pollution.",
      "Mitigation": "Pytest fixtures, temp dirs (`tmp_path`), coverage reports, peer review tests.",
      "Dependencies": ["task_2_7b2"],
      "Time Saving Strategy": "Focused testing of overwrite and helper function."
    },
    {
      "task_id": "task_2_7c1",
      "priority": "High",
      "task_name": "Integrate `write_file()` in `WorkflowDriver`",
      "description": "Integrate `write_file()` in `WorkflowDriver` via `_write_output_file()`. Test callable, no workflow logic yet.",
      "status": "Not Started",
      "Success Criteria": "`WorkflowDriver` has `_write_output_file()`, calls `write_file()`, no errors on instantiation/call.",
      "Potential Risks": "Import errors, function call errors, `WorkflowDriver` complexity, integration.",
      "Mitigation": "Import checks, signature verification, simple method, basic integration test.",
      "Dependencies": ["task_2_7b3b","task_2_6c"],
      "Time Saving Strategy": "Focused integration, simple linking method."
    },
    {
      "task_id": "task_2_8b1",
      "priority": "High",
      "task_name": "CLI Argument Parsing",
      "description": "CLI (`src/cli/main.py`): `argparse` for `--roadmap`, `--output-dir`. Basic validation, error handling, user errors.",
      "status": "Not Started",
      "Success Criteria": "CLI parses args, help correct, path validation, error messages, exit codes.",
      "Potential Risks": "Parsing logic, validation errors, unclear errors, CLI usability.",
      "Mitigation": "`argparse`, clear errors, test valid/invalid args, CLI practices.",
      "Dependencies": ["task_2_6c"],
      "Time Saving Strategy": "Robust arg parsing for user-friendly CLI."
    },
    {
      "task_id": "task_2_8b2",
      "priority": "High",
      "task_name": "CLI Task Execution Link",
      "description": "CLI: link to `WorkflowDriver` task select. CLI runs, instantiates `WorkflowDriver`, calls `select_next_task()`, prints task/none.",
      "status": "Not Started",
      "Success Criteria": "CLI runs, `WorkflowDriver` init, `select_next_task()` call, console output, no errors.",
      "Potential Risks": "`WorkflowDriver` init, `select_next_task()` errors, output, CLI errors.",
      "Mitigation": "`WorkflowDriver` check, function call checks, clear output, CLI logging.",
      "Dependencies": ["task_2_8b1"],
      "Time Saving Strategy": "Direct linking, basic console output validation."
    },
    {
      "task_id": "task_2_8b3",
      "priority": "High",
      "task_name": "CLI Unit Tests",
      "description": "Unit tests in `tests/test_cli.py` for CLI: arg parsing, workflow, task select/none. Mock `WorkflowDriver`.",
      "status": "Not Started",
      "Success Criteria": "Unit tests in `tests/test_cli.py`, cover arg parsing/workflow, mocking, assertions for CLI.",
      "Potential Risks": "Incomplete coverage, mocking errors, assertions, test setup.",
      "Mitigation": "TDD, mocking, coverage review, assertion checks, run tests.",
      "Dependencies": ["task_2_8b2"],
      "Time Saving Strategy": "Focused unit tests for robust CLI, mocking."
    },
    {
      "task_id": "task_3_1",
      "priority": "High",
      "task_name": "Phase 1.5 Stage 2 Review",
      "description": "Review Phase 1.5 Stage 2: deliverables, workflow, Level 2 components, docs. Review doc: findings, Phase 2 next steps.",
      "status": "Not Started",
      "Success Criteria": "Review doc (`docs/phase_1.5_stage_2_review.md`) summarizes deliverables, workflow, Level 2, docs, next steps.",
      "Potential Risks": "Incomplete review, superficial assessment, slow review.",
      "Mitigation": "Allocate review time, checklist, team review, actionable insights, deadlines.",
      "Dependencies": ["task_2_7c1","task_2_8b3"],
      "Time Saving Strategy": "Structured review, actionable outcomes focus."
    }
  ],
  "next_phase_actions": [
    "Set `status`: `complete` on all Level 1.5 tasks",
    "Remove all Level 1.5 tasks from the json config",
    "Set 🎯 CURRENT FOCUS to `Transition to Phase 2",
    "Add Phase 2 description, which starts with Iteration 2 (Enhanced Agents & Knowledge Graph)",
    "Add tasks from Iteration 2 (Enhanced Agents & Knowledge Graph)"
  ],
  "current_focus": "🎯 CURRENT FOCUS: Phase 1.5 Stage 2 - Completing Integration of File Write & CLI  🚀"
}