{
  "phase": "Phase 1.5 - Workflow Automation Side Project",
  "phase_goal": "Implement Level 1 and Level 2 of the Markdown-Only Automation Workflow to enhance development efficiency for Phase 2 and beyond.",
  "success_metrics": [
    "Level 1 Documentation Complete",
    "Level 2 Workflow Driver Component Implemented: `WorkflowDriver` class constructor updated to accept `Context`; `file_exists` and `list_files` methods implemented and unit tested.",
    "Basic Workflow Driver Tests Implemented",
    "Command-Line Interface and list_files method"
  ],
  "tasks": [
    {
      "task_id": "task_2_7a1",
      "priority": "High",
      "task_name": "Create `write_file.py` with placeholder function",
      "description": "Create the `src/cli/write_file.py` module with a basic placeholder `write_file(filepath, content)` function that currently does nothing (just a `pass` statement).",
      "status": "Not Started",
      "Success Criteria": "File `src/cli/write_file.py` exists with a `write_file` function that accepts `filepath` and `content` arguments and contains only a `pass` statement. File is valid Python syntax.",
      "Potential Risks": "Syntax errors, incorrect file path.",
      "Mitigation": "Use a linter to check syntax, double-check file path, add type hints.",
      "Dependencies": [],
      "Future Automation": "Automated code generation, static analysis of the function."
    },
    {
      "task_id": "task_2_7a2",
      "priority": "High",
      "task_name": "Unit test `write_file.py` placeholder function",
      "description": "Create a unit test for the placeholder `write_file` function in `tests/test_workflow_driver.py` to ensure it exists and doesn't raise exceptions. (Test should pass trivially).",
      "status": "Not Started",
      "Success Criteria": "Unit test runs without errors. Assertion checks the function exists and doesn't raise an exception when called. Test file increases coverage.",
      "Potential Risks": "Incorrect test setup, assertion errors.",
      "Mitigation": "Double-check test setup, ensure correct assertion is used. Validate file path to confirm correct file.",
      "Dependencies": ["task_2_7a1"],
      "Future Automation": "Automated test execution in CI pipeline."
    },
    {
      "task_id": "task_2_6a",
      "priority": "High",
      "task_name": "Implement Task Selection: Get list of tasks from roadmap",
      "description": "Modify `WorkflowDriver` to load tasks into class, making them easily accessable. Also verify correct `load_roadmap` to prepare for task filtering.  File to modify: `src/core/automation/workflow_driver.py`",
      "status": "Not Started",
      "Success Criteria": "Verify load_roadmap returns same number of tasks. Also verify file permissions",
      "Potential Risks": "Permission errors",
      "Mitigation": "Input file type permissions",
      "Dependencies": [],
      "Future Automation": "Add integration with code generators"
    },
    {
      "task_id": "task_2_6b",
      "priority": "High",
      "task_name": "Implement Task Selection: Select first 'Not Started' task",
      "description": "Implement basic logic in `WorkflowDriver` to iterate through `tasks` to select the *first* task with the status 'Not Started'. Return the selected task (as a dictionary). If no 'Not Started' tasks exist, return `None`. File to modify: `src/core/automation/workflow_driver.py`",
      "status": "Not Started",
      "Success Criteria": "The function iterates returns a task with `Not Started`, None will be returned, first task with status is selected",
      "Potential Risks": "Incorrect load order, fails to return tasks",
      "Mitigation": "Make sure to account for load and validate.",
      "Dependencies": ["task_2_6a"],
      "Future Automation": "Integration with LLM prompt"
    },
   {
      "task_id": "task_2_6c",
      "priority": "High",
      "task_name": "Unit test Task Selection Logic",
      "description": "Create unit tests for the task selection logic in `WorkflowDriver`, covering cases where a 'Not Started' task exists, and where no 'Not Started' tasks exist. File to modify: `tests/test_workflow_driver.py`",
      "status": "Not Started",
       "Success Criteria": "Create a new test, verify that tasks work and not, verify function is correct",
      "Potential Risks": "Fails to find edge cases",
      "Mitigation": "Increase edge cases",
      "Dependencies": ["task_2_6b"],
      "Future Automation": "Test code validation",
    },
    {
      "task_id": "task_2_7b1",
      "priority": "High",
      "task_name": "Implement `write_file` - Core File Writing Logic",
      "description": "Implement the core file writing logic in `write_file.py`. The function should take a `filepath` and `content` as input, and write the `content` to the specified file. Handle basic file I/O exceptions (e.g., `FileNotFoundError`, `PermissionError`). Use `try...except` blocks to handle errors and log them.",
      "status": "Not Started",
      "Success Criteria": "The function writes content to a file, catches FileNotFoundError, PermissionError and logs relevant messages.",
      "Potential Risks": "Unable to write, permission errors, file not found",
      "Mitigation": "Increase logging, use try/except, ensure folder permissions are correct. Ensure validation occurs and that write_file does not over write. Sanitize content.",
       "Dependencies": ["task_2_7a1", "task_2_7a2"],
      "Future Automation": "Automated code quality checks."
    },
    {
      "task_id": "task_2_7b2",
      "priority": "High",
      "task_name": "Implement `write_file` - Overwrite checks",
      "description": "Implement overwrite checks in the `write_file.py`. The function should check if the specified `filepath` already exists and raise a `FileExistsError` if so (when `overwrite=False`). Add an `overwrite=False` argument to the `write_file` function. Path injection to be avoided.",
      "status": "Not Started",
      "Success Criteria": "The function should error or overwrite according to the arguments",
      "Potential Risks": "Error can't trigger",
      "Mitigation": "Check error code",
       "Dependencies": ["task_2_7b1"],
      "Future Automation": "Integrate with security engine"
    },
    {
      "task_id": "task_2_7b3",
      "priority": "High",
      "task_name": "Unit test `write_file` - File Writing",
      "description": "Create unit tests for the `write_file` function, covering successful file writing, handling file I/O exceptions, and the overwrite check (both `overwrite=True` and `overwrite=False` cases). File to modify: `tests/test_workflow_driver.py`. Ensure testing also validates exceptions and edge cases.",
      "status": "Not Started",
      "Success Criteria": "All tests for IO exceptions work, over write flags are successful, edge cases tested.",
      "Potential Risks": "Poorly validated code that's not secure",
      "Mitigation": "Ensure validation to correct any attacks",
       "Dependencies": ["task_2_7b2"],
      "Future Automation": "Test generated"
    },
    {
      "task_id": "task_2_7c1",
      "priority": "High",
      "task_name": "Integrate `write_file` into `WorkflowDriver`",
      "description": "Modify the `WorkflowDriver` to use the `write_file` tool when it needs to write a file. This will likely involve adding a method to the `WorkflowDriver` to call the `write_file` function. File to modify: `src/core/automation/workflow_driver.py`",
      "status": "Not Started",
       "Success Criteria": "Ensure workflow runs according to plans",
      "Potential Risks": "Incompatible with test or driver class. ",
      "Mitigation": "Test that plans can run successfully",
       "Dependencies": ["task_2_7b3","task_2_6c"],
      "Future Automation": "Use integration engine to ensure tests function"
    },
    {
      "task_id": "task_2_8b1",
      "priority": "High",
      "task_name": "Implement CLI - Integrate with WorkflowDriver: Argument Parsing",
      "description": "Integrate the CLI with the `WorkflowDriver`. Add the ability to specify the roadmap and output directory via command-line arguments. Modify `src/cli/main.py`. Use try...except and validation for filepath and outputs.",
      "status": "Not Started",
       "Success Criteria": "Arguments can be passed via the prompt.",
      "Potential Risks": "Fails to validate, errors can trigger",
      "Mitigation": "Try, exceptions, check all cases work.",
       "Dependencies": ["task_2_6c"],
      "Future Automation": "Auto test"
    },
    {
      "task_id": "task_2_8b2",
      "priority": "High",
      "task_name": "Implement CLI - Integrate with WorkflowDriver: Task Execution",
      "description": "Connect the CLI to the `WorkflowDriver`'s task selection logic. When a task ID is provided, the CLI should call the `WorkflowDriver` to execute that task.  For now, this execution can just print a message indicating the task being executed. Modify `src/cli/main.py`.",
      "status": "Not Started",
       "Success Criteria": "Run command and then verify that the workflow triggers.",
      "Potential Risks": "Incompatible commands",
      "Mitigation": "Make sure instructions can trigger successfully",
       "Dependencies": ["task_2_8b1"],
      "Future Automation": "Integrate with LLM",
    },
    {
      "task_id": "task_2_8b3",
      "priority": "High",
      "task_name": "Implement CLI - Unit Tests",
      "description": "Create unit tests for the CLI, covering argument parsing and the integration with the `WorkflowDriver`. File to modify: `tests/test_cli.py` (create this file if it doesn't exist).",
      "status": "Not Started",
      "Success Criteria": "New test file, correct setup of function calls, exceptions tested",
      "Potential Risks": "Code won't run, or does bad actions",
      "Mitigation": "Test each part individually",
       "Dependencies": ["task_2_8b2"],
      "Future Automation": "Test auto execution"
    },
    {
      "task_id": "task_3_1",
      "priority": "High",
      "task_name": "Review all deliverables for Phase 1.5",
      "description": "Review all deliverables for Phase 1.5, including: \n\n* Subjective assessment of workflow improvements resulting from Markdown-Only Automation implementation.\n* Consider basic time tracking for future roadmap phases to empirically measure the impact of similar process optimizations.\n* Verify that all Level 2 Workflow Driver components are implemented as per the specification.\n* Ensure all documentation is updated to reflect the changes in Phase 1.5 Stage 2.\n",
      "status": "Not Started",
      "Success Criteria": "Final report created based on all steps",
      "Potential Risks": "Code is bad quality",
      "Mitigation": "Double check, get feedback",
       "Dependencies": ["task_2_7c1","task_2_8b3"],
      "Future Automation": "Report can generate automatically"
    }
  ],
  "next_phase_actions": [
    "Set `status`: `complete` on all Level 1.5 tasks",
    "Remove all Level 1.5 tasks from the json config",
    "Set 🎯 CURRENT FOCUS to `Transition to Phase 2",
    "Add Phase 2 description, which starts with Iteration 2 (Enhanced Agents & Knowledge Graph)",
    "Add tasks from Iteration 2 (Enhanced Agents & Knowledge Graph)"
  ],
    "current_focus": "🎯 CURRENT FOCUS (Week [Current Week Number] - Continuing Phase 1.5 Level 2): Implementing Core Workflow Automation Logic (File Writing Tool, Task Selection, CLI Integration) to improve development efficiency and transparency. 🚀 The Context class also can hold other environment details. However ensure that you make sure it has the required keys!"
}