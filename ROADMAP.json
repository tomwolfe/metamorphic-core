{
  "phase": "Phase 1.5 - Workflow Automation Side Project",
  "phase_goal": "Implement Level 3 Markdown Automation Workflow: File Writing, Task Selection, CLI Integration - efficiently and securely. Fully Automate the Driver and Code LLMs in the loop.",
  "success_metrics": [
    "All Level 1.5 Workflow Driver components fully implemented & tested (write_file, task selection, CLI integration, automated LLM interaction)",
    "Unit tests passing for all new components (100% coverage goal for critical modules)",
    "CLI tool fully functional for basic workflow execution",
    "Phase 1.5 review document completed"
  ],
  "tasks": [
    {
      "task_id": "task_2_7a1",
      "priority": "Critical",
      "task_name": "Create `write_file.py` (placeholder)",
      "description": "Fast-path: Create `src/cli/write_file.py` placeholder `write_file()` function (`pass`). Minimal initial impl. Unblocks dependent tasks.",
      "status": "Completed",
      "Success Criteria": "`write_file.py` exists, valid Python, `write_file()` with `pass`, Flake8 clean.",
      "Potential Risks": "Syntax, signature mismatch.",
      "Mitigation": "Flake8, signature review, type hints.",
      "Time Saving Strategy": "Minimal placeholder for parallel work."
    },
    {
      "task_id": "task_2_7a2",
      "priority": "High",
      "task_name": "Unit test `write_file.py` (placeholder)",
      "description": "Quickly add unit test for placeholder `write_file()`. Test existence, callability, no exceptions. Trivial pass for fast iteration.",
      "status": "Completed",
      "Success Criteria": "Test `test_write_file_placeholder_exists` in `test_workflow_driver.py`, tests `write_file()` placeholder, passes pytest.",
      "Potential Risks": "Test setup, assertion logic, exceptions.",
      "Mitigation": "Pytest docs, pytest run, output check.",
      "Dependencies": ["task_2_7a1"],
      "Time Saving Strategy": "Simple test for fast function validation."
    },
    {
      "task_id": "task_2_6a",
      "priority": "High",
      "task_name": "Load tasks in `WorkflowDriver` Init",
      "description": "Implement: `WorkflowDriver.__init__` loads tasks from `ROADMAP.json` into `self.tasks`. Verify `load_roadmap()` call in `__init__`. Modify `src/core/automation/workflow_driver.py`.",
      "status": "Completed",
      "Success Criteria": "`WorkflowDriver` init no errors, `self.tasks` populated, `load_roadmap()` called once.",
      "Potential Risks": "Scope, path, load errors.",
      "Mitigation": "`load_roadmap()` call verification, inspect `self.tasks`, logging.",
      "Dependencies": [],
      "Time Saving Strategy": "Direct implementation, clear criteria."
    },
    {
      "task_id": "task_2_6b",
      "priority": "High",
      "task_name": "Implement `select_next_task()` Logic",
      "description": "Implement `WorkflowDriver.select_next_task()`: returns 1st 'Not Started' task, or `None`. Handle empty `self.tasks`.",
      "status": "Completed",
      "Success Criteria": "`select_next_task()` returns correct task/None, handles empty list.",
      "Potential Risks": "Iteration logic, off-by-one, status check, empty list.",
      "Mitigation": "Detailed unit tests, debugger, status comparison.",
      "Dependencies": ["task_2_6a"],
      "Time Saving Strategy": "TDD, comprehensive tests for logic robustness."
    },
    {
      "task_id": "task_2_6c",
      "priority": "High",
      "task_name": "Unit test Task Selection",
      "description": "Unit tests for `select_next_task()` in `tests/test_workflow_driver.py`. Scenarios: 'Not Started' tasks (start, middle, end), none, empty list.",
      "status": "Completed",
      "Success Criteria": "Unit tests in `tests/test_workflow_driver.py`, all pass, scenarios covered, task/None assertions.",
      "Potential Risks": "Incomplete coverage, assertions, test isolation, data setup.",
      "Mitigation": "TDD, coverage review, assertion checks, clear test data.",
      "Dependencies": ["task_2_6b"],
      "Time Saving Strategy": "TDD for focused dev, clear tests for validation."
    },
    {
      "task_id": "task_2_7b1",
      "priority": "High",
      "task_name": "Impl. `write_file()` - Core Write Logic",
      "description": "Implement core file writing in `write_file.py`: write `content`, handle `FileNotFoundError`, `PermissionError` (logging). Return `True`/`False`.",
      "status": "Completed",
      "Success Criteria": "`write_file()` writes, catches/logs exceptions, returns `True`/`False`.",
      "Potential Risks": "File I/O errors, exception handling, logging, path injection, overwrite.",
      "Mitigation": "`try...except`, logging, basic path sanitization, defer overwrite.",
      "Dependencies": ["task_2_7a1", "task_2_7a2"],
      "Time Saving Strategy": "Core logic first, defer overwrite checks."
    },
    {
      "task_id": "task_2_7b2",
      "priority": "High",
      "task_name": "Impl. `write_file()` - Overwrite Checks",
      "description": "Enhance `write_file.py`: `overwrite=False` (default), check exists, `FileExistsError`. `overwrite=True` overwrites. `file_exists(filepath)` helper.",
      "status": "Completed",
      "Success Criteria": "`write_file(overwrite=False)` raises `FileExistsError`, `overwrite=True` overwrites, `file_exists()` works, documented.",
      "Potential Risks": "Overwrite logic, file checks, exceptions, race conditions.",
      "Mitigation": "Conditional logic, `os.path.exists()`, test overwrite, file locking (future).",
      "Dependencies": ["task_2_7b1"],
      "Time Saving Strategy": "Iterative enhancement, focused overwrite safety."
    },
    {
      "task_id": "task_2_7b3a",
      "priority": "High",
      "task_name": "Unit test `write_file()` - Success & Exceptions",
      "description": "Unit tests in `tests/test_workflow_driver.py` for `write_file()`: successful write, `FileNotFoundError`, `PermissionError` handling.",
      "status": "Completed",
      "Success Criteria": "Tests for success/exceptions pass, assertions verify behavior, temp files.",
      "Potential Risks": "Incomplete coverage, error simulation, assertions.",
      "Mitigation": "Pytest fixtures, temp dirs, coverage reports, TDD.",
      "Dependencies": ["task_2_7b2"],
      "Time Saving Strategy": "Focused testing of core writing and exception paths."
    },
    {
      "task_id": "task_2_7b3b",
      "priority": "High",
      "task_name": "Unit test `write_file()` - Overwrite & `file_exists()`",
      "description": "Unit tests in `tests/test_workflow_driver.py` for `write_file()`: `FileExistsError` (overwrite=False), overwrite=True, `file_exists()` tests. Coverage goal.",
      "status": "Completed",
      "Success Criteria": "Tests for overwrite/file_exists pass, assertions verify behavior, coverage goal achieved.",
      "Potential Risks": "Incomplete coverage, assertions, file pollution.",
      "Mitigation": "Pytest fixtures, temp dirs (`tmp_path`), coverage reports, peer review tests.",
      "Dependencies": ["task_2_7b2"],
      "Time Saving Strategy": "Focused testing of overwrite and helper function."
    },
    {
      "task_id": "task_2_7c1",
      "priority": "High",
      "task_name": "Integrate `write_file()` in `WorkflowDriver`",
      "description": "Integrate `write_file()` in `WorkflowDriver` via `_write_output_file()`. Test callable, no workflow logic yet.",
      "status": "Completed",
      "Success Criteria": "`WorkflowDriver` has `_write_output_file()`, calls `write_file()`, no errors on instantiation/call.",
      "Potential Risks": "Import errors, function call errors, `WorkflowDriver` complexity, integration.",
      "Mitigation": "Import checks, signature verification, simple method, basic integration test.",
      "Dependencies": ["task_2_7b3b","task_2_6c"],
      "Time Saving Strategy": "Focused integration, simple linking method."
    },
    {
      "task_id": "task_2_8b1",
      "priority": "High",
      "task_name": "CLI Argument Parsing",
      "description": "CLI (`src/cli/main.py`): `argparse` for `--roadmap`, `--output-dir`. Basic validation, error handling, user errors.",
      "status": "Completed",
      "Success Criteria": "CLI parses args, help correct, path validation, error messages, exit codes.",
      "Potential Risks": "Parsing logic, validation errors, unclear errors, CLI usability.",
      "Mitigation": "`argparse`, clear errors, test valid/invalid args, CLI practices.",
      "Dependencies": ["task_2_6c"],
      "Time Saving Strategy": "Robust arg parsing for user-friendly CLI."
    },
    {
      "task_id": "task_2_8b2",
      "priority": "High",
      "task_name": "CLI Task Execution Link",
      "description": "CLI: link to `WorkflowDriver` task select. CLI runs, instantiates `WorkflowDriver`, calls `select_next_task()`, prints task/none.",
      "status": "Completed",
      "Success Criteria": "CLI runs, `WorkflowDriver` init, `select_next_task()` call, console output, no errors.",
      "Potential Risks": "`WorkflowDriver` init, `select_next_task()` errors, output, CLI errors.",
      "Mitigation": "`WorkflowDriver` check, function call checks, clear output, CLI logging.",
      "Dependencies": ["task_2_8b1"],
      "Time Saving Strategy": "Direct linking, basic console output validation."
    },
    {
      "task_id": "task_2_8b3",
      "priority": "High",
      "task_name": "CLI Unit Tests",
      "description": "Unit tests in `tests/test_cli.py` for CLI: arg parsing, workflow, task select/none. Mock `WorkflowDriver`.",
      "status": "Completed",
      "Success Criteria": "Unit tests in `tests/test_cli.py`, cover arg parsing/workflow, mocking, assertions for CLI.",
      "Potential Risks": "Incomplete coverage, mocking errors, assertions, test setup.",
      "Mitigation": "TDD, mocking, coverage review, assertion checks, run tests.",
      "Dependencies": ["task_2_8b2"],
      "Time Saving Strategy": "Focused unit tests for robust CLI, mocking."
    },
    {
      "task_id": "task_3_1a",
      "priority": "High",
      "task_name": "Review Phase 1.5 Stage 2 (Initial Implementation)",
      "description": "Review Phase 1.5 Stage 2 deliverables (before Coder LLM automation): deliverables, workflow, Level 2 components, docs.",
      "status": "Completed",
      "Success Criteria": "Review doc summarizes deliverables, workflow, Level 2 components, docs up to initial implementation.",
      "Potential Risks": "Incomplete review, superficial assessment, slow review.",
      "Mitigation": "Allocate review time, checklist, team review, actionable insights, deadlines.",
      "Dependencies": ["task_2_7c1","task_2_8b3"],
      "Time Saving Strategy": "Structured review, actionable outcomes focus."
    },
    {
      "task_id": "task_2_9a",
      "priority": "High",
      "task_name": "Automate Coder LLM Invocation",
      "description": "Modify WorkflowDriver to directly invoke LLMOrchestrator (Coder LLM) instead of requiring manual copy-paste.",
      "status": "Completed",
      "Success Criteria": "WorkflowDriver automatically invokes Coder LLM, developer no longer needs to copy-paste prompts.",
      "Potential Risks": "Introduction of javascript injection without proper security checks. Ensure a high barrier to cross vm changes by introducing multiple step authentication to ensure a high standard to cross this barrier.",
      "Mitigation": "Prioritize code refactoring for direct LLM calls. Validate the code to prevent javascript injection. Limit all untrusted code to be used within VM only. Introduce multiple signoffs to allow code to jump VMs.",
      "Dependencies": ["task_2_7c1", "task_2_8b3"]
    },
    {
      "task_id": "task_2_9b",
      "priority": "High",
      "task_name": "Update Documentation for Automated Coder LLM",
      "description": "Revise docs/workflows/markdown_automation.md and README.md to reflect the new automated workflow.",
      "status": "Completed",
      "Success Criteria": "Documentation accurately describes the new workflow and removes references to manual Coder LLM interaction.",
      "Potential Risks": "Ensure all manual steps have been successfully removed. Any changes must be compliant.",
      "Mitigation": "Create a checklist and review updated documentation line by line to ensure content is accurate.",
      "Dependencies": ["task_2_9a"],
      "Time Saving Strategy": "Make sure documentation matches the code. Add more tests to prevent documentation to drift away from real code."
    },
    {
      "task_id": "task_2_9c",
      "priority": "High",
      "task_name": "Test Automated Coder LLM Workflow",
      "description": "Create new test cases or modify existing ones to verify the automated Coder LLM interaction is working correctly.",
      "status": "Not Started",
      "Success Criteria": "Test cases cover key scenarios and demonstrate that the end-to-end workflow is functional. The tests should check for both success and failure cases.",
      "Potential Risks": "Ensure ethical code compliance in the new system. Enforce strict adherence to guidelines and verify through dedicated framework to verify compliance.",
      "Mitigation": "Run automated tests, ethical tests, unit tests and integration tests. Use the appropriate policy to verify ethical compliance.",
      "Dependencies": ["task_2_9a"],
      "Time Saving Strategy": "Update as many tests as possible to catch both errors and security/ethical problems."
    }
  ],
  "next_phase_actions": [
    "Add Phase 1.5 Stage 3 to ROADMAP.json with tasks for Driver LLM Automation",
    "Set `status`: `complete` on all Level 1.5 Stage 2 tasks",
    "Remove all Level 1.5 Stage 2 tasks from the json config",
    "Set 🎯 CURRENT FOCUS to `Transition to Phase 2 Iteration 2: Enhanced Agents & Knowledge Graph`",
    "Update Phase 1.5 description to include Stage 3",
    "Add tasks from Iteration 2 (Enhanced Agents & Knowledge Graph)"
  ],
  "current_focus": "🎯 CURRENT FOCUS: Finishing Phase 1.5 Stage 2: Automating Coder LLM Invocation 🚀"
}